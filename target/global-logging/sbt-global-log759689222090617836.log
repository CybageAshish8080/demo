[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\ashishjam.ASHISHJAM-LAPT\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\ashishjam.ASHISHJAM-LAPT\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.5 (Oracle Corporation Java 11.0.11)
[debug]       Load.loadUnit: plugins took 229.4841ms
[debug]       Load.loadUnit: defsScala took 0.3773ms
[debug] [Loading] Scanning directory C:\Users\ashishjam.ASHISHJAM-LAPT\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\ashishjam.ASHISHJAM-LAPT\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 33.7552 ms
[debug]           Load.resolveProject(global-plugins) took 88.5584ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\ashishjam.ASHISHJAM-LAPT\.sbt\1.0\plugins, plugins: List(<none>))) took 186.5538ms
[debug] [Loading] Done in C:\Users\ashishjam.ASHISHJAM-LAPT\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 227.577ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.3848ms
[debug]     Load.loadUnit(file:/C:/Users/ashishjam.ASHISHJAM-LAPT/.sbt/1.0/plugins/, ...) took 470.2083ms
[debug]   Load.apply: load took 811.7413ms
[debug]   Load.apply: resolveProjects took 63.3628ms
[debug]   Load.apply: finalTransforms took 277.0196ms
[debug]   Load.apply: config.delegates took 10.814ms
[debug]   Load.apply: Def.make(settings)... took 1306.7889ms
[debug]   Load.apply: structureIndex took 301.4649ms
[debug]   Load.apply: mkStreams took 2.6242ms
[info] loading global plugins from C:\Users\ashishjam.ASHISHJAM-LAPT\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 8365.5985ms
[debug]           Load.loadUnit: plugins took 58.0184ms
[debug]           Load.loadUnit: defsScala took 0.0202ms
[debug] [Loading] Scanning directory C:\code\test\Scala\demo\project
[debug]             Load.loadUnit: mkEval took 9.7554ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\code\test\Scala\demo\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.744 ms
[info] loading settings for project demo-build from idea.sbt ...
[debug]               Load.resolveProject(demo-build) took 21.9878ms
[debug]             Load.loadTransitive: finalizeProject(Project(id demo-build, base: C:\code\test\Scala\demo\project, plugins: List(<none>))) took 25.912ms
[debug] [Loading] Done in C:\code\test\Scala\demo\project, returning: (demo-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 297.8232ms
[debug]           Load.loadUnit: cleanEvalClasses took 7.5987ms
[debug]         Load.loadUnit(file:/C:/code/test/Scala/demo/project/, ...) took 365.5312ms
[debug]       Load.apply: load took 367.8008ms
[debug]       Load.apply: resolveProjects took 0.15ms
[debug]       Load.apply: finalTransforms took 27.2141ms
[debug]       Load.apply: config.delegates took 0.844ms
[debug]       Load.apply: Def.make(settings)... took 322.5687ms
[debug]       Load.apply: structureIndex took 85.6301ms
[debug]       Load.apply: mkStreams took 0.0037ms
[info] loading project definition from C:\code\test\Scala\demo\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 20425.4054ms
[debug]     Load.loadUnit: defsScala took 0.0037ms
[debug] [Loading] Scanning directory C:\code\test\Scala\demo
[debug]       Load.loadUnit: mkEval took 0.5816ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\code\test\Scala\demo, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 3.2934 ms
[info] loading settings for project demo from build.sbt ...
[debug]         Load.resolveProject(demo) took 84.7945ms
[debug]       Load.loadTransitive: finalizeProject(Project(id demo, base: C:\code\test\Scala\demo, plugins: List(<none>))) took 90.7724ms
[debug] [Loading] Done in C:\code\test\Scala\demo, returning: (demo)
[debug]     Load.loadUnit: loadedProjectsRaw took 8006.5201ms
[debug]     Load.loadUnit: cleanEvalClasses took 17.5375ms
[debug]   Load.loadUnit(file:/C:/code/test/Scala/demo/, ...) took 28452.2156ms
[debug] Load.apply: load took 28461.0404ms
[debug] Load.apply: resolveProjects took 0.2013ms
[debug] Load.apply: finalTransforms took 63.2722ms
[debug] Load.apply: config.delegates took 0.3725ms
[debug] Load.apply: Def.make(settings)... took 272.1965ms
[debug] Load.apply: structureIndex took 31.4344ms
[debug] Load.apply: mkStreams took 0.0038ms
[info] set current project to demo (in build file:/C:/code/test/Scala/demo/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 64117 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 64117, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to demo (in build file:/C:/code/test/Scala/demo/)
[debug] > Exec(idea-shell, None, None)
